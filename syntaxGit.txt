La URL del repo se usa para conectarse, 
en este caso ser치: https://github.com/julianfv1150/2doRepositorio.git

git init: inicializa la carpeta

git config user.name ""
git config email.name ""
git config user.password 

git status (marca en rojo los archivos con
		cambios)

git add . (Ponerle el punto agrega todos los archivos
		sino podemos utilizar los nombres
		de los que queremos subir)

git commit -m (preparar para subir archivos
		con un comentario)

git remote add origin URL (Este agrega una
		direcci칩n remota a traves del
		URL y lo nombre como ORIGIN)

git remote remove origin (Este birra una 
		direcci칩n remota ya vinculada)

git push -u origin main/master (envia al remoto
		los cambios listos para actualizar
		a veces funciona con master, a veces
		con main)

git pull origin main (descarga todos los cambios del
		remoto)

git pull origin main --allow-unrelated-histories(leer
		la aclaraci칩n de abajo)

*Datos curiosos de GIT, cuando borramos 
archivos como la carpeta.git suele generar un
 error de confirmaciones y etiquetas que no 
permite revincular los nuevos repositorios, 
al hacer pull o push da errores de merge. Se 
puede solucionar usando el argumento: 
--allow-unrelated-histories.


git clone URL (Este comando clona todo el remoto
		indicado en la URL)


git branch (Nos dice en que rama estoy parado
		actualmente con color)

git branch nombre (Crear una nueva rama)

git branch -m nombre nuevo nombre (Cambiar nombre 
		de rama)

git checkout nombre-rama (Nos cambia a la rama que
		queremos)

git branch -d nombre (Borra la rama que le digamos)

clear (limpia la terminal)

touch "nombre.txt" (Crea archivos desde la consola)

git dif rama1 rama2 (Sirve para comparar dos ramas,
		la rama que nombremos primero en la
		syntax es relevante para comparar)

git merge ramaOrigen ramaDestino (Ej: rama1 hacia master
		



